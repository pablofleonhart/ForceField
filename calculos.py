import math

def calcPhi (Ci, N, CA, C):
	
	V1 = [(N[0]-Ci[0]),(N[1]-Ci[1]),(N[2]-Ci[2])]
	V2 = [(CA[0]-N[0]),(CA[1]-N[1]),(CA[2]-N[2])]
	V3 = [(C[0]-CA[0]),(C[1]-CA[1]),(C[2]-CA[2])]
	
	n1 = [((V1[1]*V2[2]) - (V1[2]*V2[1])),-((V1[0]*V2[2]) - (V1[2]*V2[0])),((V1[0]*V2[1]) - (V1[1]*V2[0]))]
	n2 = [((V2[1]*V3[2]) - (V2[2]*V3[1])),-((V2[0]*V3[2]) - (V2[2]*V3[0])),((V2[0]*V3[1]) - (V2[1]*V3[0]))]
	
	n3 = [((n1[1]*n2[2]) - (n1[2]*n2[1])),-((n1[0]*n2[2]) - (n1[2]*n2[0])),((n1[0]*n2[1]) - (n1[1]*n2[0]))]
	
	V2prod = math.sqrt((V2[0]**2) + (V2[1]**2) + (V2[2]**2))
	V2n = [(V2[0]/ V2prod), (V2[1]/ V2prod), (V2[2]/ V2prod)]
	
	x = (n3[0]* V2n[0]) + (n3[1]* V2n[1]) + (n3[2]* V2n[2])
	
	y = (n1[0]* n2[0]) + (n1[1]* n2[1]) + (n1[2]* n2[2])
	
	phi = math.atan2(x, y)
	
	return round(phi,2)

def calcPsi (Ni, CA, C, N):
	
	V1 = [(CA[0]-Ni[0]),(CA[1]-Ni[1]),(CA[2]-Ni[2])]
	V2 = [(C[0]-CA[0]),(C[1]-CA[1]),(C[2]-CA[2])]
	V3 = [(N[0]-C[0]),(N[1]-C[1]),(N[2]-C[2])]
	
	n1 = [((V1[1]*V2[2]) - (V1[2]*V2[1])),((V1[2]*V2[0]) - (V1[0]*V2[2])),((V1[0]*V2[1]) - (V1[1]*V2[0]))]
	n2 = [((V2[1]*V3[2]) - (V2[2]*V3[1])),((V2[2]*V3[0]) - (V2[0]*V3[2])),((V2[0]*V3[1]) - (V2[1]*V3[0]))]
	
	n3 = [((n1[1]*n2[2]) - (n1[2]*n2[1])),-((n1[0]*n2[2]) - (n1[2]*n2[0])),((n1[0]*n2[1]) - (n1[1]*n2[0]))]
	
	V2prod = math.sqrt((V2[0]**2) + (V2[1]**2) + (V2[2]**2))
	V2n = [(V2[0]/ V2prod), (V2[1]/ V2prod), (V2[2]/ V2prod)]
	
	x = (n3[0]* V2n[0]) + (n3[1]* V2n[1]) + (n3[2]* V2n[2])
	
	y = (n1[0]* n2[0]) + (n1[1]* n2[1]) + (n1[2]* n2[2])
	
	psi = math.atan2(x, y)
	psi = math.degrees(psi)
	
	return round(psi,2)

